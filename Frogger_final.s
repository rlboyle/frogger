// Ryan Boyle RLB7543

// Inspired by the classic arcade game frogger, the player controls the frog
// 		using the pushbuttons and accumulates points by moving forward.

// Advanced Features 
// Sound: Intro music, sound when frog moves, frog dies, powerup collected, and level completed 
// Massive number of active and discernable sprites: 1 frog, 1 moving text sprite, 3 powerups, 21 cars
// Complex scoring system: Increment score by ten when frog moves forward, moving backwards
// 		and forwards again does not count. Points only accumulate when the frog moves to a
//		previously unreached y-coordinate. Powerup #1 (pink square) adds one life when collected.
//		Powerup #2 (yellow square) adds 100 points when collected. Evil powerup (red square)
// 		subtracts 100 points when hit.

// Controls
// Button #0: Move frog right
// Button #1: Move frog left
// Button #2: Move frog down
// Button #3: Move frog up
// Note: Buttons must be unchecked before use. Unchecking a checked button will not move the frog.
//		The frog can only be moved by checking an unchecked button.

// YouTube Demo Link: https://youtu.be/5EHK2Ya0CcE

// These are addresses for the pixel buffer and text buffer
.EQU PIX_BUFFER, 0xc8000000
.EQU TEXT_BUFFER, 0xc9000000
.EQU BACK_BUFFER, 0xc0000000
.EQU BACK_CHARBUFF, 0xc1000000
.EQU BACK_REG, 0xFF203024
.EQU BUFF_REG, 0xFF203020
.EQU CHARBACK_REG, 0xFF203034
.EQU CHARBUFF_REG, 0xFF203030
.EQU STATUS_REG, 0xff20302c
.EQU CHAR_STATUS_REG, 0xff20303c

// These are some useful defines that will help you access structure fields
.EQU PIXMAP_WIDTH, 0
.EQU PIXMAP_HEIGHT, 2
.EQU PIXMAP_TRANSPARENCY, 4
.EQU PIXMAP_PIXELDATA, 6

// Sprite access defines
.EQU XPOS, 0
.EQU YPOS, 4
.EQU XVEL, 8
.EQU YVEL, 12
.EQU PIXMAP, 16
.EQU ACTIVE, 20

// Misc
.EQU SCREEN_COLOR, 0x0000
.EQU FROG_JUMP, 25
.EQU CAR_SPEED, 1
.EQU CAR_SPEED1, 2
.EQU FROG_START, 225
.EQU RED_CAR_START, 200
.EQU BLUE_CAR_START, 175
.EQU GREEN_CAR_START, 150
.EQU EMPTY_CAR_LANE, 125
.EQU RED_CAR_START2, 100
.EQU BLUE_CAR_START2, 75
.EQU GREEN_CAR_START2, 50
.EQU LAST_ROW_CAR_START, 25

.global _start
_start:
	
	// Inital stack
	mov sp, #0x800000
	
	// backbuffer and back charbuff address set
	ldr r0, =BACK_REG
	ldr r1, =BACK_BUFFER
	str r1, [r0]
	mov r10, #0
	
	ldr r0, =CHARBACK_REG
	ldr r1, =BACK_CHARBUFF
	str r1, [r0]
	mov r11, #0
	
	ldr r0, =new_level_sprite
	mov r1, #100
	str r1, [r0, #XPOS]
	mov r1, #30
	str r1, [r0, #YPOS]
	mov r1, #1
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	
	// set inital number of lives
	ldr r0, =LivesLeft
	mov r1, #3
	str r1, [r0]
	
	ldr r0, =1000
	mov r1, #30
	bl Sound

	ldr r0, =1000
	mov r1, #25
	bl Sound

	ldr r0, =1000
	mov r1, #20
	bl Sound

	ldr r0, =1000
	mov r1, #15
	bl Sound

	ldr r0, =3000
	mov r1, #25
	bl Sound

	ldr r0, =1000
	mov r1, #20
	bl Sound

	ldr r0, =300000
	mov r1, #15
	bl Sound
	
new_level:
	bl init
	
new_life:
// set frog initial position and velocity
	ldr r0, =frog_sprite
	mov r1, #160
	str r1, [r0, #XPOS]
	mov r1, #FROG_START
	str r1, [r0, #YPOS]
	mov r1, #0
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =frog_pix
	str r1, [r0, #PIXMAP]
	ldr r1, =ButtonAlreadyPressed
	ldr r0, =0x01010101
	str r0, [r1]
	
.data
	
LivesMessage:
	.string "Lives Remaining:"
	
GameOverMessage:
	.string "Game Over"
	
ScoreMessage:
	.string "Score:"
	
NextLevelMessage:
	.string "Level Complete, Keep Going!"
	
.text
	
inf_loop:
	bl ClearTextBuffer
	ldr r0, =SCREEN_COLOR
	bl ClearVGA
	
	bl NewLevelMove
	
	mov r1, #58
	mov r0, #1
	ldr r2, =LivesMessage
	bl DrawStr
	
	bl ScoreKeeper
	
	ldr r4, =LivesLeft
	ldr r4, [r4]
	mov r1, #75
	mov r2, #233
	ldr r0, =frog_lives_pix
	b drawlivescond
	
drawlives:
	push {r0, r1, r2}
	bl BitBlit
	pop {r0, r1, r2}
	sub r4, #1
	add r1, r1, #10
	
drawlivescond:
	cmp r4, #0
	bne drawlives
	ldr r4, =LivesLeft
	ldr r4, [r4]
	cmp r4, #0
	bgt game_not_over
	ldr r2, =GameOverMessage
	mov r0, #36
	mov r1, #29
	bl DrawStr
	b end_game_loop
	
game_not_over:
	
	bl MoveFrogFromButtons
	
	ldr r0, =frog_sprite
	push {r0}
	ldr r1, [r0, #XPOS]
	ldr r2, [r0, #YPOS]
	ldr r0, [r0, #PIXMAP]
	bl BitBlit
	pop {r0}
	
	// increment frog posn according to velocity
	ldr r1, [r0, #XVEL]
	ldr r2, [r0, #XPOS]
	add r2, r1, r2
	str r2, [r0, #XPOS]
	ldr r1, [r0, #YVEL]
	ldr r2, [r0, #YPOS]
	add r2, r1, r2
	str r2, [r0, #YPOS]
	bl Wrap
	
	// draw pink powerup
	ldr r5, =powerup_sprite
	ldr r2, [r5, #ACTIVE]
	cmp r2, #1
	bne skip847
	
	// increment sprite posn according to velocity
	ldr r1, [r5, #XVEL]
	ldr r2, [r5, #XPOS]
	add r2, r1, r2
	str r2, [r5, #XPOS]
	ldr r1, [r5, #YVEL]
	ldr r2, [r5, #YPOS]
	add r2, r1, r2
	str r2, [r5, #YPOS]
	mov r0, r5
	bl Bounce
	
	ldr r1, [r5, #XPOS]
	ldr r2, [r5, #YPOS]
	ldr r0, [r5, #PIXMAP]
	bl BitBlit
	
	ldr r1, =frog_sprite // check for collision with frog
	mov r0, r5
	bl CollisionCheck
	cmp r0, #1
	bne skip847
	
	// play fun sound!
	ldr r0, =100
	mov r1, #20
	bl Sound
	ldr r0, =100
	mov r1, #19
	bl Sound
	ldr r0, =100
	mov r1, #18
	bl Sound
	ldr r0, =100
	mov r1, #17
	bl Sound
	ldr r0, =100
	mov r1, #16
	bl Sound
	ldr r0, =100
	mov r1, #15
	bl Sound
	ldr r0, =100
	mov r1, #14
	bl Sound
	ldr r0, =100
	mov r1, #13
	bl Sound
	ldr r0, =100
	mov r1, #12
	bl Sound
	ldr r0, =100
	mov r1, #11
	bl Sound
	ldr r0, =800
	mov r1, #10
	bl Sound
	
	mov r1, #0
	str r1, [r5, #ACTIVE]
	
	ldr r4, =LivesLeft
	ldr r5, [r4]
	add r5, r5, #1
	str r5, [r4]
	
skip847:

// draw yellow powerup
	ldr r5, =powerup_yellow_sprite
	ldr r2, [r5, #ACTIVE]
	cmp r2, #1
	bne skip8479
	
	// increment sprite posn according to velocity
	ldr r1, [r5, #XVEL]
	ldr r2, [r5, #XPOS]
	add r2, r1, r2
	str r2, [r5, #XPOS]
	ldr r1, [r5, #YVEL]
	ldr r2, [r5, #YPOS]
	add r2, r1, r2
	str r2, [r5, #YPOS]
	mov r0, r5
	bl Bounce
	
	ldr r1, [r5, #XPOS]
	ldr r2, [r5, #YPOS]
	ldr r0, [r5, #PIXMAP]
	bl BitBlit
	
	ldr r1, =frog_sprite // check for collision with frog
	mov r0, r5
	bl CollisionCheck
	cmp r0, #1
	bne skip8479
	
	
	// play fun sound!
	ldr r0, =100
	mov r1, #20
	bl Sound
	ldr r0, =100
	mov r1, #19
	bl Sound
	ldr r0, =100
	mov r1, #18
	bl Sound
	ldr r0, =100
	mov r1, #17
	bl Sound
	ldr r0, =100
	mov r1, #16
	bl Sound
	ldr r0, =100
	mov r1, #15
	bl Sound
	ldr r0, =100
	mov r1, #14
	bl Sound
	ldr r0, =100
	mov r1, #13
	bl Sound
	ldr r0, =100
	mov r1, #12
	bl Sound
	ldr r0, =100
	mov r1, #11
	bl Sound
	ldr r0, =800
	mov r1, #10
	bl Sound
	
	mov r1, #0
	str r1, [r5, #ACTIVE]
	
	ldr r4, =curr_pos
	ldr r6, =farthest_pos
	ldr r5, [r4]
	add r5, r5, #10
	str r5, [r4]
	ldr r5, [r6]
	add r5, r5, #10
	str r5, [r6]
	
skip8479:

	// draw evil powerup
	ldr r5, =powerup_evil_sprite
	ldr r2, [r5, #ACTIVE]
	cmp r2, #1
	bne skip8471
	
	// increment sprite posn according to velocity
	ldr r1, [r5, #XVEL]
	ldr r2, [r5, #XPOS]
	add r2, r1, r2
	str r2, [r5, #XPOS]
	ldr r1, [r5, #YVEL]
	ldr r2, [r5, #YPOS]
	add r2, r1, r2
	str r2, [r5, #YPOS]
	mov r0, r5
	bl Bounce
	
	ldr r1, [r5, #XPOS]
	ldr r2, [r5, #YPOS]
	ldr r0, [r5, #PIXMAP]
	bl BitBlit
	
	ldr r1, =frog_sprite // check for collision with frog
	mov r0, r5
	bl CollisionCheck
	cmp r0, #1
	bne skip8471
	
	
	// play fun sound!
	ldr r0, =800
	mov r1, #10
	bl Sound
	ldr r0, =100
	mov r1, #11
	bl Sound
	ldr r0, =100
	mov r1, #12
	bl Sound
	ldr r0, =100
	mov r1, #13
	bl Sound
	ldr r0, =100
	mov r1, #14
	bl Sound
	ldr r0, =100
	mov r1, #15
	bl Sound
	ldr r0, =100
	mov r1, #16
	bl Sound
	ldr r0, =100
	mov r1, #17
	bl Sound
	ldr r0, =100
	mov r1, #18
	bl Sound
	ldr r0, =100
	mov r1, #19
	bl Sound
	ldr r0, =100
	mov r1, #20
	bl Sound
	
	mov r1, #0
	str r1, [r5, #ACTIVE]
	
	ldr r4, =curr_pos
	ldr r6, =farthest_pos
	ldr r5, [r4]
	sub r5, r5, #10
	str r5, [r4]
	ldr r5, [r6]
	sub r5, r5, #10
	str r5, [r6]
	
skip8471:
	
	
MoveLoop:
	ldr r5, =SpriteArrayStart
	b MoveLoopCond
	
MoveLoopBody:

	ldr r1, [r5, #XPOS]
	ldr r2, [r5, #YPOS]
	ldr r0, [r5, #PIXMAP]
	bl BitBlit
	
	// increment sprite posn according to velocity
	ldr r1, [r5, #XVEL]
	ldr r2, [r5, #XPOS]
	add r2, r1, r2
	str r2, [r5, #XPOS]
	ldr r1, [r5, #YVEL]
	ldr r2, [r5, #YPOS]
	add r2, r1, r2
	str r2, [r5, #YPOS]
	mov r0, r5
	bl Wrap
	
	ldr r1, =frog_sprite // check for collision with frog
	mov r0, r5
	bl CollisionCheck
	cmp r0, #1
	bne skip137
	
	// play fun sound!
	push {r0, r1, r2, r3}
	ldr r0, =500
	mov r1, #5
	bl Sound

	ldr r0, =500
	mov r1, #10
	bl Sound

	ldr r0, =500
	mov r1, #20
	bl Sound
	pop {r0, r1, r2, r3}
	
	ldr r2, =LivesLeft
	ldr r0, [r2]
	sub r0, r0, #1 // subtract 1 from lives
	str r0, [r2] // store new value
	ldr r2, =curr_pos
	ldr r3, =farthest_pos
	ldr r3, [r3]
	str r3, [r2] // set curr_pos equal to farthest_pos
	b new_life
	
skip137:
	
	add r5, r5, #20 // move next sprite
	
MoveLoopCond:
	ldr r1, =SpriteArrayEnd
	cmp r5, r1
	bne MoveLoopBody
	
	
	
// buffer stuff, write animation code above this
end_game_loop:
	ldr r0, =BUFF_REG
	mov r1, #1
	str r1, [r0]
	
	cmp r10, #0
	moveq r10, #1
	movne r10, #0
	
	ldr r0, =CHARBUFF_REG
	mov r1, #1
	str r1, [r0]
	
	cmp r11, #0
	moveq r11, #1
	movne r11, #0
	
buff_wait:
	ldr r1, =STATUS_REG
	ldr r0, [r1]
	and r0, r0, #1
	cmp r0, #1
	beq buff_wait

charbuff_wait:
	ldr r1, =CHAR_STATUS_REG
	ldr r0, [r1]
	and r0, r0, #1
	cmp r0, #1
	beq charbuff_wait
	
	b inf_loop
	
.pool
	
//	
//	
//	Subroutines
//
//

init: // initialize all sprite positions and velocities at startup
	push {lr}
	
	ldr r0, =powerup_sprite
	ldr r1, =50
	str r1, [r0, #XPOS]
	mov r1, #BLUE_CAR_START // start in blue car lane
	str r1, [r0, #YPOS]
	mov r1, #5
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =powerup_pix
	str r1, [r0, #PIXMAP]
	mov r1, #1
	str r1, [r0, #ACTIVE]
	
	ldr r0, =powerup_yellow_sprite
	ldr r1, =300
	str r1, [r0, #XPOS]
	mov r1, #GREEN_CAR_START2 // start in green car lane
	str r1, [r0, #YPOS]
	mov r1, #3
	rsb r1, r1, #0
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =powerup_yellow_pix
	str r1, [r0, #PIXMAP]
	mov r1, #1
	str r1, [r0, #ACTIVE]
	
	ldr r0, =powerup_evil_sprite
	ldr r1, =200
	str r1, [r0, #XPOS]
	mov r1, #EMPTY_CAR_LANE // start in empty car lane
	str r1, [r0, #YPOS]
	mov r1, #2
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =powerup_evil_pix
	str r1, [r0, #PIXMAP]
	mov r1, #1
	str r1, [r0, #ACTIVE]
	
	// set red car initial position and velocity
	ldr r0, =red_car_sprite
	ldr r1, =30
	str r1, [r0, #XPOS]
	mov r1, #RED_CAR_START
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =red_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =red_car_sprite1
	ldr r1, =130
	str r1, [r0, #XPOS]
	mov r1, #RED_CAR_START
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =red_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =red_car_sprite2
	ldr r1, =230
	str r1, [r0, #XPOS]
	mov r1, #RED_CAR_START
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =red_car_pix
	str r1, [r0, #PIXMAP]
	
	// set blue car initial position and velocity
	ldr r0, =blue_car_sprite
	mov r2, #0
	sub r2, r2, #CAR_SPEED
	ldr r1, =30
	str r1, [r0, #XPOS]
	mov r1, #BLUE_CAR_START
	str r1, [r0, #YPOS]
	mov r1, r2
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =blue_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =blue_car_sprite1
	ldr r1, =130
	str r1, [r0, #XPOS]
	mov r1, #BLUE_CAR_START
	str r1, [r0, #YPOS]
	mov r1, r2
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =blue_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =blue_car_sprite2
	ldr r1, =230
	str r1, [r0, #XPOS]
	mov r1, #BLUE_CAR_START
	str r1, [r0, #YPOS]
	mov r1, r2
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =blue_car_pix
	str r1, [r0, #PIXMAP]
	
	// set green car initial position and velocity
	ldr r0, =green_car_sprite
	ldr r1, =30
	str r1, [r0, #XPOS]
	mov r1, #GREEN_CAR_START
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED1
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =green_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =green_car_sprite1
	ldr r1, =180
	str r1, [r0, #XPOS]
	mov r1, #GREEN_CAR_START
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED1
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =green_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =red_car_sprite3
	ldr r1, =50
	str r1, [r0, #XPOS]
	mov r1, #RED_CAR_START2
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =red_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =red_car_sprite4
	ldr r1, =180
	str r1, [r0, #XPOS]
	mov r1, #RED_CAR_START2
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =red_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =red_car_sprite5
	ldr r1, =280
	str r1, [r0, #XPOS]
	mov r1, #RED_CAR_START2
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =red_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =blue_car_sprite3
	mov r2, #0
	sub r2, r2, #CAR_SPEED
	ldr r1, =80
	str r1, [r0, #XPOS]
	mov r1, #BLUE_CAR_START2
	str r1, [r0, #YPOS]
	mov r1, r2
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =blue_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =blue_car_sprite4
	ldr r1, =140
	str r1, [r0, #XPOS]
	mov r1, #BLUE_CAR_START2
	str r1, [r0, #YPOS]
	mov r1, r2
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =blue_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =blue_car_sprite5
	ldr r1, =230
	str r1, [r0, #XPOS]
	mov r1, #BLUE_CAR_START2
	str r1, [r0, #YPOS]
	mov r1, r2
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =blue_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =green_car_sprite2
	ldr r1, =280
	str r1, [r0, #XPOS]
	mov r1, #GREEN_CAR_START2
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED1
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =green_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =green_car_sprite3
	ldr r1, =30
	str r1, [r0, #XPOS]
	mov r1, #GREEN_CAR_START2
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED1
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =green_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =green_car_sprite4
	ldr r1, =120
	str r1, [r0, #XPOS]
	mov r1, #GREEN_CAR_START2
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED1
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =green_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =green_car_sprite5
	ldr r1, =200
	str r1, [r0, #XPOS]
	mov r1, #GREEN_CAR_START2
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED1
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =green_car_pix
	str r1, [r0, #PIXMAP]
	
	// draw last row of cars
	ldr r0, =red_car_sprite6
	ldr r1, =30
	str r1, [r0, #XPOS]
	mov r1, #LAST_ROW_CAR_START
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =red_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =blue_car_sprite6
	ldr r1, =180
	str r1, [r0, #XPOS]
	mov r1, #LAST_ROW_CAR_START
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =blue_car_pix
	str r1, [r0, #PIXMAP]
	
	ldr r0, =green_car_sprite6
	ldr r1, =300
	str r1, [r0, #XPOS]
	mov r1, #LAST_ROW_CAR_START
	str r1, [r0, #YPOS]
	mov r1, #CAR_SPEED
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	ldr r1, =green_car_pix
	str r1, [r0, #PIXMAP]
	
	pop {pc}


NewLevelInit:
	push {lr}
	
	ldr r0, =new_level_sprite
	mov r1, #0
	str r1, [r0, #XPOS]
	mov r1, #30
	str r1, [r0, #YPOS]
	mov r1, #1
	str r1, [r0, #XVEL]
	mov r1, #0
	str r1, [r0, #YVEL]
	
	pop {pc}
	
NewLevelMove:
	
	push {r5, lr}
	
	ldr r5, =new_level_sprite
	
	ldr r0, [r5, #XPOS]
	ldr r1, [r5, #YPOS]
	ldr r2, =NextLevelMessage
	bl DrawStr
	
	// increment sprite posn according to velocity
	ldr r1, [r5, #XVEL]
	ldr r2, [r5, #XPOS]
	add r2, r1, r2
	str r2, [r5, #XPOS]
	ldr r1, [r5, #YVEL]
	ldr r2, [r5, #YPOS]
	add r2, r1, r2
	str r2, [r5, #YPOS]
	
	ldr r2, [r5, #XPOS]
	ldr r1, =100
	cmp r2, r1
	ldr r2, =90
	strgt r2, [r5, #XPOS]
	
	pop {r5, pc}
	
ScoreKeeper: // no input, calculates and displays score on screen
	push {lr}
	
	mov r1, #56
	mov r0, #1
	ldr r2, =ScoreMessage
	bl DrawStr
	
	ldr r2, =curr_pos
	ldr r3, =farthest_pos
	
	ldr r0, [r2] // get curr_pos
	ldr r1, [r3] // get farthest_pos
	cmp r0, r1
	blt skip43 // if curr_pos < farthest_pos, do not increment
	str r0, [r3] // store curr_pos in farthest_pos
	
skip43:
	ldr r2, =score_count // calculate score and store
	mov r0, #10
	mul r1, r1, r0
	str r1, [r2]
	
	ldr r2, =score_count
	ldr r2, [r2]
	mov r0, #8
	mov r1, #56
	bl DrawNum
	
	pop {pc}

CollisionCheck: // check for collisons between two sprites
				// sprite struct addresses are in r0 and r1
				// if the sprites have collided, returns #1 in r0
	push {r4, r5, r6, lr}
	
	ldr r2, [r0, #PIXMAP] // r2 = pixmap of sprite 0
	ldr r3, [r1, #PIXMAP] // r3 = pixmap of sprite 1
	
	ldrh r4, [r2, #PIXMAP_WIDTH]
	lsr r4, #1 // r4 = 0.5*width of sprite 0
	ldr r5, [r0, #XPOS]
	add r4, r5, r4 // r4 = right edge of sprite 0
	
	ldrh r5, [r3, #PIXMAP_WIDTH]
	lsr r5, #1 // r5 = 0.5*width of sprite 1
	ldr r6, [r1, #XPOS]
	sub r5, r6, r5 // r5 = left edge of sprite 1
	
	cmp r4, r5 // if right edge0 < left edge1
	blt NoCollide
	
	ldrh r4, [r2, #PIXMAP_WIDTH]
	lsr r4, #1 // r4 = 0.5*width of sprite 0
	ldr r5, [r0, #XPOS]
	sub r4, r5, r4 // r4 = left edge of sprite 0
	
	ldrh r5, [r3, #PIXMAP_WIDTH]
	lsr r5, #1 // r5 = 0.5*width of sprite 1
	ldr r6, [r1, #XPOS]
	add r5, r6, r5 // r5 = right edge of sprite 1
	
	cmp r5, r4 // if left edge0 < right edge1
	blt NoCollide
	
	ldrh r4, [r2, #PIXMAP_HEIGHT]
	lsr r4, #1 // r4 = 0.5*height of sprite 0
	ldr r5, [r0, #YPOS]
	add r4, r5, r4 // r4 = bottom edge of sprite 0
	
	ldrh r5, [r3, #PIXMAP_HEIGHT]
	lsr r5, #1 // r5 = 0.5*width of sprite 1
	ldr r6, [r1, #YPOS]
	sub r5, r6, r5 // r5 = top edge of sprite 1
	
	cmp r4, r5 // if bottom edge0 < top edge1
	blt NoCollide
	
	ldrh r4, [r2, #PIXMAP_HEIGHT]
	lsr r4, #1 // r4 = 0.5*height of sprite 0
	ldr r5, [r0, #YPOS]
	sub r4, r5, r4 // r4 = top edge of sprite 0
	
	ldrh r5, [r3, #PIXMAP_HEIGHT]
	lsr r5, #1 // r5 = 0.5*width of sprite 1
	ldr r6, [r1, #YPOS]
	add r5, r6, r5 // r5 = bottom edge of sprite 1
	
	cmp r5, r4 // if bottom edge1 < top edge0
	blt NoCollide
	
YesCollide:
	mov r0, #1
	b CollisionCheckDone

NoCollide:
	mov r0, #0

CollisionCheckDone:
	pop {r4, r5, r6, pc}
	
	
Sound: // play quick sound
		//duration = r0, pitch = r1
	push {r4, r5}
	ldr  r3, =0xff203040
	ldr  r4, =0x60000000
	mov  r5, r1
WaitForWriteSpace:
	sub r0, r0, #1
	cmp r0, #0
	bne skip9000
	pop {r4, r5}
	bx lr
skip9000:
	ldr  r2, [r3, #4]
	tst  r2, #0xff000000
	beq  WaitForWriteSpace
	tst  r2, #0x00ff0000
	beq  WaitForWriteSpace
WriteTwoSamples:
	cmp r1, #0
	beq skip3832
	str  r4, [r3, #8]
	str  r4, [r3, #12]
	skip3832:
	subs r5, #1
	bne  WaitForWriteSpace
HalfPeriodInvertWaveform:
	mov  r5, r1
	neg  r4, r4
	b    WaitForWriteSpace
	
	
MoveFrogFromButtons: // take button inputs and adjust frog velocity accordingly
	push {r4, r5, r6, lr}
	ldr r2, =0xff200050
	ldr r1, =frog_sprite
	ldrb r2, [r2]
	ldr r4, =ButtonAlreadyPressed
	ldr r5, =curr_pos
	
	next0:
	and r0, r2, #0x1 // check button 0
	cmp r0, #0
	beq next1
	ldrb r3, [r4]
	and r0, r3, #0x1 // check if already pressed
	cmp r0, #0
	bne next1
	push {r0, r1, r2, r3}
	mov r0, #500
	mov r1, #10
	bl Sound
	pop {r0, r1, r2, r3}
	ldr r0, [r1, #XPOS] // move frog right
	add r0, r0, #FROG_JUMP		// move frog right
	ldr r6, =319
	cmp r0, r6
	strlt r0, [r1, #XPOS] // move frog right
	movlt r0, #1
	strltb r0, [r4]
	
	next1:
	and r0, r2, #0x2 // check button 1
	cmp r0, #0
	beq next2
	ldrb r3, [r4, #1]
	and r0, r3, #0x1 // check if already pressed
	cmp r0, #0
	bne next2
	push {r0, r1, r2, r3}
	mov r0, #500
	mov r1, #10
	bl Sound
	pop {r0, r1, r2, r3}
	ldr r0, [r1, #XPOS] // move frog left
	sub r0, r0, #FROG_JUMP		// move frog left
	cmp r0, #0
	strgt r0, [r1, #XPOS] // move frog left
	movgt r0, #1
	strgtb r0, [r4, #1]
	
	next2:
	and r0, r2, #0x4 // check button 2
	cmp r0, #0
	beq next3
	ldrb r3, [r4, #2]
	and r0, r3, #0x1 // check if already pressed
	cmp r0, #0
	bne next3
	push {r0, r1, r2, r3}
	mov r0, #500
	mov r1, #10
	bl Sound
	pop {r0, r1, r2, r3}
	ldr r0, [r1, #YPOS] // move frog backwards
	add r0, r0, #FROG_JUMP		// move frog backwards
	cmp r0, #239
	strlt r0, [r1, #YPOS] // move frog backwards
	movlt r0, #1
	strltb r0, [r4, #2]
	ldrlt r0, [r5] // load curr_pos value
	sublt r0, r0, #1 // decrement curr_pos value
	strlt r0, [r5] // save new curr_pos value
	
	next3:
	and r0, r2, #0x8 // check button 3
	cmp r0, #0
	beq next4
	ldrb r3, [r4, #3]
	and r0, r3, #0x1 // check if already pressed
	cmp r0, #0
	bne next4
	push {r0, r1, r2, r3}
	mov r0, #500
	mov r1, #10
	bl Sound
	pop {r0, r1, r2, r3}
	mov r0, #1 // update button mem
	strb r0, [r4, #3]
	
	ldr r0, [r1, #YPOS] // move frog forward
	sub r0, r0, #FROG_JUMP		// move frog forward
	cmp r0, #0
	bgt skip9873
	
	ldr r0, =500 // play fun sound!
	mov r1, #10
	bl Sound
	ldr r0, =2000
	mov r1, #5
	bl Sound
	
	bl NewLevelInit
	pop {r4, r5, r6, lr}
	b new_level
skip9873:
	str r0, [r1, #YPOS] // move frog forward
	ldr r0, [r5] // load curr_pos value
	add r0, r0, #1 // increment curr_pos value
	str r0, [r5] // save new curr_pos value
	
	next4: // reset button memory if button is released
	mov r3, #0
	and r0, r2, #1
	cmp r0, #0
	streqb r3, [r4]
	
	mov r3, #0
	and r0, r2, #2
	cmp r0, #0
	streqb r3, [r4, #1]
	
	mov r3, #0
	and r0, r2, #4
	cmp r0, #0
	streqb r3, [r4, #2]
	
	mov r3, #0
	and r0, r2, #8
	cmp r0, #0
	streqb r3, [r4, #3]
	
	pop {r4, r5, r6, lr}
	bx lr
	
	
Wrap: // wraps sprite movement around screen r0 = sprite struct
	push {r4, lr}
	
	ldr r3, [r0, #PIXMAP]
	ldrh r3, [r3, #PIXMAP_WIDTH]
	mov r2, #0
	sub r2, r2, r3, lsr #1
	ldr r4, =319 // check for off screen coordinates
	ldr r1, [r0, #XPOS]
	sub r1, r1, r3, lsr #1
	cmp r1, r4
	strgt r2, [r0, #XPOS]
	
	add r1, r1, r3
	cmp r1, #0
	add r2, r2, r3
	strlt r4, [r0, #XPOS]
	
	ldr r3, [r0, #PIXMAP]
	ldrh r3, [r3, #PIXMAP_HEIGHT]
	mov r2, #0
	sub r2, r2, r3, lsr #1
	ldr r1, [r0, #YPOS]
	sub r1, r1, r3, lsr #1
	cmp r1, #239
	strgt r2, [r0, #YPOS]
	
	mov r2, #239
	add r1, r1, r3
	cmp r1, #0
	add r2, r2, r3
	strlt r2, [r0, #YPOS]
	
	pop {r4, pc}

	
Bounce: // wraps sprite movement around screen r0 = sprite struct
	push {r4, r5, r6, lr}
	
	ldr r4, =319 // check for off screen coordinates
	ldr r1, [r0, #XPOS]
	ldr r2, [r0, #XVEL]
	ldr r3, [r0, #PIXMAP]
	ldrh r5, [r3, #PIXMAP_WIDTH]
	lsr r5, #1
	rsb r2, #0
	
	add r6, r1, r5
	cmp r6, r4
	strgt r2, [r0, #XVEL]
	sub r6, r1, r5
	cmp r6, #0
	strlt r2, [r0, #XVEL]
	
	ldr r1, [r0, #YPOS]
	ldr r2, [r0, #YVEL]
	ldr r3, [r0, #PIXMAP]
	ldrh r5, [r3, #PIXMAP_HEIGHT]
	lsr r5, #1
	rsb r2, #0
	
	add r6, r1, r5
	cmp r6, #239
	strgt r2, [r0, #YVEL]
	sub r6, r1, r5
	cmp r6, #0
	strlt r2, [r0, #YVEL]
	pop {r4, r5, r6, pc}



DrawNum: // r0=x r1=y r2=num
	push {r4, r5, r6, r7, r8, lr} // r8 = negative num?
	
//while (dividend != 0):
//	dividend = dividend / 10
//	remainder = remainder + 48
//	push {remainder}
calcDigits:
	mov r5, #0 // r5 counts number of digits
	and r8, r2, #2147483648 // select sign bit
	lsr r8, r8, #31
	cmp r8, #1
	bne conditionCalc
	rsb r2, r2, #0
	b conditionCalc

calcBody:
	add r5, r5, #1
	divisionByTen: // divide r2 by ten, put result (quotient) in r3
		mov r3, #0 // and put remainder in r4
		mov r4, r2
		b conditionDiv
	divBody:
		sub r4, r4, #10
		add r3, r3, #1	
	conditionDiv:
		cmp r4, #10
		bge divBody
	mov r2, r3
	add r4, r4, #48
	push {r4}

conditionCalc:
	cmp r2, #0
	bne calcBody
	
drawSetup:
	cmp r8, #1
	bne NumDrawCond
	mov r4, #45
	cmp r0, #79
	bgt negativeskip
	cmp r1, #59
	bgt negativeskip
	cmp r0, #0
	blt negativeskip
	cmp r1, #0
	blt negativeskip
	push {r2}
	mov r2, r4
	bl DrawAscii
	pop {r2}
	b negativeskip

NumDrawBody: //while (r5 > 0):
	pop {r4} // get digit to draw

actuallyDrawNumbers:
	push {r2}
	mov r2, r4
	bl DrawAscii
	pop {r2}
	
skipdrawnum:
	sub r5, r5, #1 // decrement r5
negativeskip:
	add r0, r0, #1 // increment x-value

NumDrawCond:
	cmp r5, #0
	bgt NumDrawBody

DrawNumDone:
	pop {r4, r5, r6, r7, r8, pc}
	

DrawStr:
	push {r5, r6, lr} // r5 = ascii char, r6 = character buffer address
	b condition1 // branch to loop condition
	
body1:
	cmp r0, #79
	bgt skipdraw
	cmp r1, #59
	bgt skipdraw
	cmp r0, #0
	blt skipdraw
	cmp r1, #0
	blt skipdraw
	
draw:
	push {r0, r1, r2}
	mov r2, r5
	bl DrawAscii
	pop {r0, r1, r2}

skipdraw:
	add r0, r0, #1 // increment x-value
	add r2, r2, #1 // increment string counter
	
	
condition1:
	ldrb r5, [r2] // load new ascii char
	cmp r5, #0 // check for null char
	bne body1
	
DrawStrDone:
	pop {r5, r6, pc}

DrawAscii: // Draws ascii character in text buffer. Does not write to memory if
		  		 // input character is out of range (0,0)-(79,59)
		  		 // given x-coord in r0, y-coord in r1, and ascii value in r2
				 
	push {r6, lr} // r6 = character buffer address
	cmp r11, #1
	ldreq r3, =TEXT_BUFFER
	ldrne r3, =BACK_CHARBUFF
	
	cmp r0, #79 // check for off screen coordinates
	bgt DrawAsciiDone
	cmp r1, #59
	bgt DrawAsciiDone
	cmp r0, #0
	blt DrawAsciiDone
	cmp r1, #0
	blt DrawAsciiDone
	
	// draw!
	lsl r6, r1, #7 // shift y-value left for buffer addition
	add r6, r0, r6 // add x-value and shifted y-value 
	add r6, r3, r6 // add base address
	strb r2, [r6] // draw char

DrawAsciiDone:
	pop {r6, pc}
	
	

DrawPixel: // Draws pixel into vga display. Does not write to memory if
		  		 // input character is out of range (0,0)-(320,240)
		  		 // given x-coord in r0, y-coord in r1, and color value in r2
				 // DOES NOT MODIFY INPUTS
	push {r6}
	cmp r10, #1
	ldreq r3, =PIX_BUFFER
	ldrne r3, =BACK_BUFFER
	
	ldr r6, =319
	cmp r0, r6 // check for off screen coordinates
	bgt DrawPixelDone
	cmp r1, #239
	bgt DrawPixelDone
	cmp r0, #0
	blt DrawPixelDone
	cmp r1, #0
	blt DrawPixelDone
	
	// draw!
	add r6, r3, r1, lsl #10 
	add r6, r6, r0, lsl #1
	strh r2, [r6]
	
DrawPixelDone:
	pop {r6}
	bx lr


ClearTextBuffer: // clears text buffer by filling it with spaces. Takes no input
	push {r6}
	mov r2, #32 // r2 = ascii value for space char 
	mov r1, #0 // r1 = ycoord
	cmp r11, #1
	ldreq r3, =TEXT_BUFFER
	ldrne r3, =BACK_CHARBUFF
	
textbuffxreset:
	mov r0, #0 // r0 = xcoord
	
textbuffclear: // draw space in text buffer to clear it at that coordinate
	// draw!
	// shift y-value left for buffer addition
	add r6, r0, r1, lsl #7 // add x-value and shifted y-value 
	add r6, r3, r6 // add base address
	strb r2, [r6] // draw char
	add r0, r0, #1 // increment xcoord
	
textbufferxcoordloopcond:
	cmp r0, #79	// has xcoord reached the edge of the screen
	ble textbuffclear // draw another space if coordinate still on screen
	add r1, r1, #1 // increment ycoord
	cmp r1, #59	// is ycoord off screen
	ble textbuffxreset // draw another space if ycoord still on screen

ClearTextBufferDone:
	pop {r6}
	bx lr

ClearVGA: /* clears video buffer by filling it with the given color value.
Colors as zero-extended 16-bit values. 0xffff is white, 0x0000 is black. */
	push {r6}
	mov r2, r0 // r2 = color value
	add r2, r2, r0, lsl #16
	mov r1, #0 // r1 = ycoord
	cmp r10, #1
	ldreq r3, =PIX_BUFFER
	ldrne r3, =BACK_BUFFER
	
vgaxreset:
	mov r0, #0 // r0 = xcoord
	
clearvgadraw: // draw one pixel 
	// draw!
	add r6, r3, r1, lsl #10 
	add r6, r6, r0, lsl #1
	str r2, [r6]
	add r0, r0, #2 // increment xcoord
	
vgaxcoordloopcond:
	cmp r0, #320	// has xcoord reached the edge of the screen
	ble clearvgadraw // draw another pixel if coordinate still on screen
	add r1, r1, #1 // increment ycoord
	cmp r1, #240	// is ycoord off screen
	ble vgaxreset // draw another pixel if ycoord still on screen

ClearVGADone:
	pop {r6}
	bx lr
	


BitBlit: // BitBlit(pmap : pixmap_ptr, x : int, y : int) : none
	push {r4, r5, r6, r7, r8, r9, lr}
	ldrh r4, [r0, #PIXMAP_WIDTH] // r4 = width
	ldrh r5, [r0, #PIXMAP_HEIGHT] // r5 = height
	sub r1, r1, r4, lsr #1 // r1 = xcoords of top right corner
	sub r2, r2, r5, lsr #1 // r2 = ycoords of top right corner
	add r4, r4, r1 // r4 = xcoord stop point
	add r5, r5, r2 // r5 = ycoord stop point
	mov r6, r1 // r6 = xcoord start point
	mov r8, r0 // r8 = pixmap address
	mov r1, r2 // r1 = updated ycoord
	add r7, r8, #PIXMAP_PIXELDATA // r7 = address of next pixel to draw
	ldrh r9, [r8, #PIXMAP_TRANSPARENCY] // r9 = transparency color
	
bitblitreset:
	mov r0, r6 // r0 = updated xcoord
	
bitblitdraw: // draw one pixel
	ldrh r2, [r7]
	cmp r9, r2
	beq bitblitincrementstuff 
	push {r0, r1, r2}
	bl DrawPixel
	pop {r0, r1, r2}
	
bitblitincrementstuff:
	add r0, r0, #1 // increment xcoord
	add r7, r7, #2 // increment next pixel address
	
bitblitxcoordloopcond:
	cmp r0, r4	// has xcoord reached the edge of the image
	blt bitblitdraw // draw another pixel if coordinate still within image bounds
	add r1, r1, #1 // increment ycoord
	cmp r1, r5	// is ycoord within image bounds
	blt bitblitreset // draw another pixel if ycoord still within image bounds
	
BitBlitDone:
	pop {r4, r5, r6, r7, r8, r9, pc}


.data
	
.align 3

next_level:
	.word 0x00000000

score_count:
	.word 0x00000000

farthest_pos:
	.word 0x00000000
	
curr_pos:
	.word 0x00000000

gameover:
	.word 0x00000000

LivesLeft:
	.word 0x00000000

ButtonAlreadyPressed:
	.byte 0x01
	.byte 0x01
	.byte 0x01
	.byte 0x01

powerup_sprite:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	.word 0x00000000 // active?
	
powerup_yellow_sprite:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	.word 0x00000000 // active?
	
powerup_evil_sprite:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	.word 0x00000000 // active?

new_level_sprite:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity

frog_sprite:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
SpriteArrayStart:
red_car_sprite:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
red_car_sprite1:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
red_car_sprite2:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
blue_car_sprite:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
blue_car_sprite1:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
blue_car_sprite2:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
green_car_sprite:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
green_car_sprite1:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
red_car_sprite3:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
red_car_sprite4:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
red_car_sprite5:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
blue_car_sprite3:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
blue_car_sprite4:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
blue_car_sprite5:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
green_car_sprite2:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
green_car_sprite3:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
green_car_sprite4:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
green_car_sprite5:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
red_car_sprite6:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
blue_car_sprite6:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
green_car_sprite6:
	.word 0x00000000 //xposn
	.word 0x00000000 //yposn
	.word 0x00000000 //xvelocity
	.word 0x00000000 //yvelocity
	.word 0x00000000 //pixmap_ptr
	
SpriteArrayEnd:
	
// pixmaps

powerup_pix:
	.hword 8, 8, 0x0000
	.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f
	.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f
	.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f
	.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f
	.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f
	.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f
	.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f
	.hword 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f, 0xf00f
	
powerup_yellow_pix:
	.hword 8, 8, 0x0000
	.hword 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00
	.hword 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00
	.hword 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00
	.hword 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00
	.hword 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00
	.hword 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00
	.hword 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00
	.hword 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00

powerup_evil_pix:
	.hword 8, 8, 0x0000
	.hword 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800
	.hword 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800
	.hword 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800
	.hword 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800
	.hword 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800
	.hword 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800
	.hword 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800
	.hword 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800

frog_lives_pix:
	.hword 8, 8, 0x0000
	.hword 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780
	.hword 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780
	.hword 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780
	.hword 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780
	.hword 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780
	.hword 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780
	.hword 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780
	.hword 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780

green_car_pix:
	.hword 36, 20, 0x1fc2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1f82, 0x636c, 0x632c, 0x632d, 0x634c, 0x634c, 0x632d
	.hword 0x632c, 0x636c, 0x1f82, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x27a2, 0x17c2, 0x1f83, 0x27a2
	.hword 0x632d, 0x6b4c, 0x6b0d, 0x632d, 0x632d, 0x6b0d, 0x6b4c, 0x632d, 0x27a2, 0x1f83
	.hword 0x17c2, 0x27a2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x634c, 0x634c, 0x634c, 0x634c, 0x634c, 0x634c, 0x634c, 0x634c, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x27a3, 0x1fe1, 0x630d, 0x636b, 0x634c, 0x632c
	.hword 0x632c, 0x634c, 0x636b, 0x630d, 0x1fe1, 0x27a3, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x632d, 0x632d, 0x632d, 0x632d
	.hword 0x632d, 0x632d, 0x632d, 0x632d, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa1
	.hword 0x17c1, 0x1f82, 0x634d, 0x6b2d, 0x632d, 0x634c, 0x634c, 0x632d, 0x6b2d, 0x634d
	.hword 0x1f82, 0x17c1, 0x1fa1, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x634c, 0x634c, 0x634c, 0x634c, 0x634c, 0x634c, 0x634c, 0x634c
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x27c2, 0x1fc3, 0x2783, 0x27c2, 0x1f82, 0x1fe1
	.hword 0x27a1, 0x27a2, 0x27a2, 0x27a1, 0x1fe1, 0x1f82, 0x27c2, 0x2783, 0x1fc3, 0x27c2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x27a2, 0x1fa2, 0x1fc1, 0x2763, 0x1fe2, 0x2783, 0x1f83, 0x1fa2, 0x1fa2, 0x1f83
	.hword 0x2783, 0x1fe2, 0x2763, 0x1fc1, 0x1fa2, 0x27a2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x27a2, 0x1fa2, 0x1fa3
	.hword 0x1fc1, 0x1fa2, 0x17c2, 0x1fa2, 0x1fa2, 0x17c2, 0x1fa2, 0x1fc1, 0x1fa3, 0x1fa2
	.hword 0x27a2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x2782, 0x27c2, 0x1f82, 0x1fa2, 0x27a2, 0x1f82
	.hword 0x1f82, 0x27a2, 0x1fa2, 0x1f82, 0x27c2, 0x2782, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa3
	.hword 0x632c, 0x632d, 0x634c, 0x632c, 0x632c, 0x634c, 0x632d, 0x632c, 0x1fa3, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa3, 0x632c, 0x632d, 0x634c, 0x632c
	.hword 0x632c, 0x634c, 0x632d, 0x632c, 0x1fa3, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa3, 0x632c, 0x632d, 0x634c, 0x632c, 0x632c, 0x634c, 0x632d, 0x632c
	.hword 0x1fa3, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa3, 0x632c, 0x632d
	.hword 0x634c, 0x632c, 0x632c, 0x634c, 0x632d, 0x632c, 0x1fa3, 0x1fa2, 0x1fa2, 0x1fa2
	.hword 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x1fa2, 0x1fa2, 0x1fa2, 0x1fa2


blue_car_pix:
	.hword 36, 20, 0x83f
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x5e, 0x81e, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x81e, 0x5e, 0x85f, 0x85e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x634c, 0x634c, 0x634c, 0x634c
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x103f, 0x5b2a, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x103f, 0x3e
	.hword 0x3e, 0x81f, 0x81f, 0x3e, 0x3e, 0x103f, 0x5d, 0x5f, 0x85f, 0x7e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3f, 0x3f
	.hword 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3f, 0x3f, 0x5e, 0x7f, 0x1d, 0x5e, 0x7e, 0x7e, 0x7e, 0x7e
	.hword 0x5e, 0x1d, 0x7f, 0x5e, 0x3f, 0x3f, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x85f, 0x3e, 0x1f, 0x85f
	.hword 0x81f, 0x85f, 0x3e, 0x1f, 0x1f, 0x3e, 0x85f, 0x81f, 0x85f, 0x1f
	.hword 0x3e, 0x85f, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x85f, 0x85f, 0x85f, 0x85f, 0x85f, 0x85f, 0x85f, 0x85f, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x5d, 0x85f, 0x3f, 0x5e, 0x3e, 0x85e, 0x5e, 0x3e
	.hword 0x3e, 0x5e, 0x85e, 0x3e, 0x5e, 0x3f, 0x85f, 0x5d, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3f
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x3f, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3f, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x3f, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3f, 0x634c, 0x634c, 0x632c, 0x632c, 0x632c, 0x632c, 0x634c, 0x634c
	.hword 0x3f, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3f, 0x634c, 0x634c
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x634c, 0x634c, 0x3f, 0x3e, 0x3e, 0x3e
	.hword 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x3e, 0x3e, 0x3e, 0x3e


red_car_pix:
	.hword 36, 20, 0xf241
	.hword 0xf221, 0xea22, 0xf222, 0xea21, 0x632c, 0x632c, 0x632c, 0x632d, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0xea21, 0xf222, 0xea22, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xfa01, 0xf240, 0xf221
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0xf221, 0xf240
	.hword 0xfa01, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xfa22, 0xea42, 0xf261, 0xf202, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0xf202, 0xf261, 0xea42, 0xfa22, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0x634c, 0x634c, 0x634c, 0x634c
	.hword 0x634c, 0x634c, 0x634c, 0x634c, 0xf221, 0xf221, 0xf221, 0xf221, 0xf222, 0xea22
	.hword 0xfa22, 0xf203, 0x6b6b, 0x634c, 0x6b4c, 0x634c, 0x634c, 0x6b4c, 0x634c, 0x6b6b
	.hword 0xf203, 0xfa22, 0xea22, 0xf222, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xea40, 0xf240, 0xea03, 0xf202
	.hword 0xf221, 0xea21, 0xea21, 0xf221, 0xf202, 0xea03, 0xf240, 0xea40, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf220, 0xf222, 0xf201, 0xea40, 0xfa22, 0xf221, 0xf240, 0xf222, 0xf222, 0xf240
	.hword 0xf221, 0xfa22, 0xea40, 0xf201, 0xf222, 0xf220, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf222, 0xf222, 0xf222, 0xf222, 0xf222, 0xf222
	.hword 0xf222, 0xf222, 0xf221, 0xf221, 0xf221, 0xf221, 0xf222, 0xea43, 0xf222, 0xf221
	.hword 0xea42, 0xea42, 0xfa01, 0xea22, 0xea22, 0xfa01, 0xea42, 0xea42, 0xf221, 0xf222
	.hword 0xea43, 0xf222, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xfa01, 0xf222, 0xf220, 0xf221, 0xf222, 0xf202, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf202, 0xf222, 0xf221, 0xf220, 0xf222, 0xfa01, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf222, 0xf221
	.hword 0x632d, 0x634c, 0x632d, 0x632c, 0x632c, 0x632d, 0x634c, 0x632d, 0xf221, 0xf222
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf222, 0xf221, 0x632d, 0x634c, 0x632d, 0x632c
	.hword 0x632c, 0x632d, 0x634c, 0x632d, 0xf221, 0xf222, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf222, 0xf221, 0x632d, 0x634c, 0x632d, 0x632c, 0x632c, 0x632d, 0x634c, 0x632d
	.hword 0xf221, 0xf222, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf222, 0xf221, 0x632d, 0x634c
	.hword 0x632d, 0x632c, 0x632c, 0x632d, 0x634c, 0x632d, 0xf221, 0xf222, 0xf221, 0xf221
	.hword 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0xf221, 0x632c, 0x632c
	.hword 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0xf221, 0xf221, 0xf221, 0xf221


	
frog_pix:
	.hword 24, 18, 0xffff
	.hword 0xffff, 0xffff, 0x17e2, 0x17e2, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7a0, 0xffc2
	.hword 0xfc3, 0x1f82, 0xf7c2, 0xffa0, 0xf781, 0xefe1, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xfc1, 0x17e2, 0xffff, 0xffff, 0xffff, 0xffff, 0x17a2, 0x2784, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xf7e1, 0xef60, 0x17e1, 0x1fc0, 0xe7a0, 0xffc0, 0xf7e1, 0xff81
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0x2784, 0x17a2, 0xffff, 0xffff, 0x17a1, 0x1781
	.hword 0x17e3, 0x17a1, 0xffff, 0xffff, 0xf118, 0xf93b, 0x1783, 0x1fe3, 0xf7a2, 0xefc2
	.hword 0xf7e1, 0xef81, 0x1fc3, 0x1fa1, 0xf93b, 0xf118, 0xffff, 0xffff, 0x17a1, 0x17e3
	.hword 0x1781, 0x17a1, 0x17c3, 0x17c2, 0x1762, 0x27a4, 0xffff, 0xffff, 0xf958, 0xe159
	.hword 0x1fe3, 0x2782, 0xf7a1, 0xefc1, 0xefa0, 0xefc0, 0x17e3, 0x1782, 0xe159, 0xf958
	.hword 0xffff, 0xffff, 0x27a4, 0x1762, 0x17c2, 0x17c3, 0xffff, 0xffff, 0x17c2, 0x17c2
	.hword 0xffff, 0xffff, 0x1f83, 0x1fc3, 0x7c0, 0x1782, 0xf7c2, 0xffc1, 0xffa1, 0xf7c1
	.hword 0x1fa2, 0x1fa3, 0x1fc3, 0x1f83, 0xffff, 0xffff, 0x17c2, 0x17c2, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0x17a2, 0x1fa3, 0xffff, 0xffff, 0x27a3, 0x17c1, 0x1fa1, 0x1fa2
	.hword 0xf7c0, 0xefc1, 0xf782, 0xffa1, 0xfa2, 0x17c1, 0x17c1, 0x27a3, 0xffff, 0xffff
	.hword 0x1fa3, 0x17a2, 0xffff, 0xffff, 0xffff, 0xffff, 0x1fa1, 0xfe1, 0x17a1, 0x17e2
	.hword 0xff82, 0xefc1, 0xefc0, 0xf7a2, 0xefc2, 0xf7a2, 0xf7a1, 0xf7e0, 0xf781, 0xf7e2
	.hword 0xefc1, 0xff82, 0x17e2, 0x17a1, 0xfe1, 0x1fa1, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0x17a3, 0x1fa2, 0x1783, 0x1fc2, 0xf7a1, 0xf7c1, 0xff83, 0xf7c1, 0xf7c0, 0xefe1
	.hword 0xefa1, 0xffa1, 0xefa2, 0xffc0, 0xf7c1, 0xf7a1, 0x1fc2, 0x1783, 0x1fa2, 0x17a3
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7a1, 0xf7c2
	.hword 0x17e1, 0x17a3, 0xefc0, 0xf7c1, 0xf7e0, 0xefc0, 0xffc1, 0xf781, 0xf7c2, 0xf7a1
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffc0, 0xefc0, 0x1f83, 0x17a3, 0xffc2, 0xf763, 0xefe1, 0xff82
	.hword 0xe7a1, 0xf7e0, 0xefc0, 0xffc0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0x7a1, 0x1fa0, 0x1782, 0x17c2, 0xf781, 0xf7e2, 0xfe1, 0x17a1
	.hword 0xefe0, 0xf7c0, 0xf7a0, 0xffa1, 0xf7c1, 0xf7a2, 0xf7e2, 0xf781, 0x17c2, 0x1782
	.hword 0x1fa0, 0x7a1, 0xffff, 0xffff, 0xffff, 0xffff, 0x1fe2, 0x17c3, 0x1fa2, 0x17e3
	.hword 0xffa1, 0xf7c0, 0x1781, 0x1fe3, 0xefc1, 0xff62, 0xf7c1, 0xffa0, 0xef81, 0xefe1
	.hword 0xf7c0, 0xffa1, 0x17e3, 0x1fa2, 0x17c3, 0x1fe2, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0x1763, 0x17c2, 0xffff, 0xffff, 0xfa2, 0x1fa2, 0xffc2, 0xefc2, 0x17c1, 0x1fa2
	.hword 0xefa2, 0xf7c1, 0xff82, 0xf7c0, 0x1fa2, 0xfa2, 0xffff, 0xffff, 0x17c2, 0x1763
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0x27a2, 0x17c2, 0xffff, 0xffff, 0xfa2, 0x1f81
	.hword 0xf7c1, 0xf7c3, 0x17a3, 0x27c2, 0xe7e1, 0xe7e0, 0xffa1, 0xf7c2, 0x1f81, 0xfa2
	.hword 0xffff, 0xffff, 0x17c2, 0x27a2, 0xffff, 0xffff, 0x17e2, 0xfa1, 0x17c2, 0xfa1
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0x17c1, 0x17c3, 0xefa0, 0xefa1, 0xff82, 0xf7a1
	.hword 0x1f82, 0x17a2, 0xffff, 0xffff, 0xffff, 0xffff, 0xfa1, 0x17c2, 0xfa1, 0x17e2
	.hword 0x1f82, 0x1fa4, 0xfc2, 0x1fc0, 0xffff, 0xffff, 0xffff, 0xffff, 0x17c2, 0x17a1
	.hword 0xff82, 0xf7c1, 0xefa0, 0xefe1, 0x17c2, 0x1fa3, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0x1fc0, 0xfc2, 0x1fa4, 0x1f82, 0xffff, 0xffff, 0x17c2, 0x17a2, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0x17a2, 0x17c2, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0x17c2, 0x17a2, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
	.hword 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x17a2, 0x17c2
	.hword 0xffff, 0xffff